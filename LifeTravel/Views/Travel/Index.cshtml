@model LifeTravel.Models.LifeOfTravel

@{
    ViewBag.Title = "Life of Travel - Ahmedabad";
}

<div class="container mt-5">
    <h1 class="text-center mb-4">@ViewBag.Title</h1>

    @* Display the success message if available *@
    @if (TempData["SuccessMessage"] != null)
    {
        <div id="successMessage" class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @using (Html.BeginForm("Index", "Travel", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <div class="card p-4 shadow">
            <h3 class="card-title text-center mb-4">Travel Information Form</h3>

            @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" }) <!-- Validation summary for all errors -->

            <div class="row mb-3">
                <!-- Name -->
                <div class="col-md-4">
                    <label for="Name" class="form-label">Name:</label>
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", id = "Name", required = "required", placeholder = "Enter your name" })
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                </div>

                <!-- Email -->
                <div class="col-md-4">
                    <label for="Email" class="form-label">Email:</label>
                    @Html.TextBoxFor(m => m.Email, new { @class = "form-control", id = "Email", type = "email", required = "required", placeholder = "Enter your email" })
                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                </div>

                <!-- City -->
                <div class="col-md-4">
                    <label for="City" class="form-label">City:</label>
                    @Html.TextBoxFor(m => m.City, new { @class = "form-control", id = "City", required = "required", placeholder = "Enter your city" })
                    @Html.ValidationMessageFor(m => m.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-3">
                <!-- Food Preference -->
                <div class="col-md-4">
                    <label class="form-label">Food (Regular/Jain):</label><br />
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="FoodPreference" value="Regular" required />
                        <label class="form-check-label">Regular</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="FoodPreference" value="Jain" required />
                        <label class="form-check-label">Jain</label>
                    </div>
                    @Html.ValidationMessageFor(m => m.FoodPreference, "", new { @class = "text-danger" })
                </div>

                <!-- Phone Number -->
                <div class="col-md-4">
                    <label for="PhoneNumber" class="form-label">Phone number:</label>
                    @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", id = "PhoneNumber", required = "required", placeholder = "Enter your phone number" })
                    @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                </div>

                <!-- Comments -->
                <div class="col-md-4">
                    <label for="Comments" class="form-label">Comments:</label>
                    @Html.TextAreaFor(m => m.Comments, new { @class = "form-control", id = "Comments", rows = "2", required = "required", placeholder = "Enter your comments" })
                    @Html.ValidationMessageFor(m => m.Comments, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="row mb-4 ">
                <!-- Photo -->
                <div class="col-md-4">
                    <label for="Photo" class="form-label">Photo:</label>
                    @Html.TextBoxFor(m => m.Photo, new { @class = "form-control", id = "Photo", type = "file", placeholder = "Upload your photo" })
                    @Html.ValidationMessageFor(m => m.Photo, "", new { @class = "text-danger" })
                </div>

                <!-- Video -->
                <div class="col-md-4">
                    <label for="Video" class="form-label">Video:</label>
                    @Html.TextBoxFor(m => m.Video, new { @class = "form-control", id = "Video", type = "file", placeholder = "Upload your video" })
                    @Html.ValidationMessageFor(m => m.Video, "", new { @class = "text-danger" })
                </div>
            </div>

            <!-- Submit Button -->
            <div class="text-center">
                <button type="submit" class="btn btn-black">Submit</button>
            </div>
        </div>
    }
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const allowedPhotoFormats = ["image/jpeg", "image/png", "image/jpg"];
        const allowedVideoFormat = "video/mp4";
        const maxPhotoSize = 5 * 1024 * 1024;  // 5 MB in bytes

        const form = document.querySelector("form");
        const photoInput = document.getElementById("Photo");
        const videoInput = document.getElementById("Video");

        form.addEventListener("submit", function (event) {
            let errors = [];

            // Validate Photo
            if (photoInput.files[0]) {
                const file = photoInput.files[0];

                // Check file format
                if (!allowedPhotoFormats.includes(file.type)) {
                    errors.push("Only JPG, JPEG, and PNG formats are allowed for photos.");
                }

                // Check file size
                if (file.size > maxPhotoSize) {
                    errors.push("The photo file size should not exceed 5 MB.");
                }
            }

            // Validate Video
            if (videoInput.files[0] && videoInput.files[0].type !== allowedVideoFormat) {
                errors.push("Only MP4 format is allowed for videos.");
            }

            // If there are errors, prevent form submission and show alert
            if (errors.length > 0) {
                event.preventDefault();
                alert(errors.join("\n"));  // Show the error messages in an alert box
            }
        });

        // Check if success message exists and set a timeout for it
        const successMessage = document.getElementById("successMessage");
        if (successMessage) {
            setTimeout(function () {
                successMessage.style.display = "none";
            }, 5000); // Hide after 5 seconds
        }
    });
</script>
